package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/chinmay-sawant/apolloexample/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := &model.Todo{
		Text: input.Text,
		ID:   fmt.Sprintf("T%d", len(r.todos)+1),
		User: &model.User{ID: input.UserID, Name: "TODO: implement"},
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	if len(r.todos) == 0 {
		todos := []*model.Todo{
			{
				ID:   "1",
				Text: "Learn Go",
				User: &model.User{ID: "1", Name: "John Doe"},
			},
			{
				ID:   "2",
				Text: "Build a GraphQL server",
				User: &model.User{ID: "2", Name: "Jane Doe"},
			},
		}
		r.todos = todos
		return r.todos, nil
	}
	return r.todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
